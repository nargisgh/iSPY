package cmpt276.termproject.model;

import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.view.View;
import android.widget.Toast;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import cmpt276.termproject.R;

public class CardDrawer extends View {

    public static final int IMG_WIDTH = 150;
    public static final int IMG_HEIGHT = 150;
    private float RADIUS = 350f;
    private Paint paint = new Paint();
    private Canvas canvas;

    //TODO : Draw the Draw and Discard Piles

    private GameManager gameManager;
    private List<Integer> draw_card_imgs;
    private List<Integer> discard_card_imgs;
    private List<Integer> images_list;


    private List<Bitmap> discard_bitmap_list;
    private List<Bitmap> draw_bitmap_list;
    private List<int[]> bitmap_pos;

    public CardDrawer (Context context, AttributeSet attrs){
        super(context, attrs);
        setup();
    }


    private void setup(){
        gameManager = GameManager.getInstance();

        draw_card_imgs = new ArrayList<>();
        discard_card_imgs = new ArrayList<>();

        discard_bitmap_list = new ArrayList<>();
        draw_bitmap_list = new ArrayList<>();
        bitmap_pos = new ArrayList<>();

        initialiseImagesArray();

        //TODO: Have to init all Bitmaps here for better performance
    }


    @Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        this.canvas = canvas;

        //Set Stroke Settings
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(Color.GRAY);

        drawCard((getWidth() / 2f),(getHeight() / 2f) + RADIUS );
        discard((getWidth() / 2f),(getHeight() / 2f) - RADIUS);

    }


    private void initialiseImagesArray(){
        TypedArray typedArray = getResources().obtainTypedArray(R.array.theme_1_images);
        //Change theme if applicable
        if (gameManager.getTheme() == 2){
            typedArray = getResources().obtainTypedArray(R.array.theme_2_images);
        }
        // Grab the images from the XML all images stored in the imgs_list as drawables
        images_list = new ArrayList<>();
        for (int i = 0; i < typedArray.length(); i ++){
            images_list.add(typedArray.getResourceId(i, -1));
        }
        //Recycle Typed array for garbage collection
        typedArray.recycle();
    }


    private void discard(float x, float y){
        //Draw Card if possible
        if (gameManager.getDiscardPile().size() == 0){
            gameManager.drawCard();
        }

        //Generate the Drawables from the array of ints that was generated by the CardManager
        createDiscardArray();

        //Draw the Card Circle
        canvas.drawCircle(x,y,RADIUS ,paint);
        //Drawing images around the card evenly distributed
        int section_size = 360 / discard_card_imgs.size();

        Collections.shuffle(discard_card_imgs);
        for (int i = 0 ; i < discard_card_imgs.size() ; i ++) {

            //Draw scaled Bitmaps
            Bitmap card_img = BitmapFactory.decodeResource(getContext().getResources(), discard_card_imgs.get(i));
            Bitmap scaled_img = Bitmap.createScaledBitmap(card_img, (int) (IMG_WIDTH ), (int) (IMG_HEIGHT ), true);

            ImagePlacer imagePlacer = new ImagePlacer().invoke(x, y, section_size, i, scaled_img);

            discard_bitmap_list.add(scaled_img);

            //Draw Bitmap
            canvas.drawBitmap(scaled_img, imagePlacer.getPosX() , imagePlacer.getPosY() , null);
        }
    }

    private void drawCard(float x, float y){
        //Draw Card if possible
        if (gameManager.getDrawPile().size() > 0){
            gameManager.drawCard();

        }
        //Generate the Drawables from the array of ints that was generated by the CardManager
        boolean draw_pile_empty = createDrawArray();

        if (!draw_pile_empty) {
            //Draw the Card Circle
            canvas.drawCircle(x, y, RADIUS, paint);

            //Drawing images around the card evenly distributed
            int section_size = 360 / draw_card_imgs.size();

            Collections.shuffle(draw_card_imgs);
            for (int i = 0; i < draw_card_imgs.size(); i++) {
                //TODO: Add rotation offset so the images are not always in the same place

                //Draw scaled Bitmaps
                Bitmap card_img = BitmapFactory.decodeResource(getContext().getResources(), draw_card_imgs.get(i));
                Bitmap scaled_img = Bitmap.createScaledBitmap(card_img, (int) (IMG_WIDTH ), (int) (IMG_HEIGHT ), true);

                ImagePlacer imagePlacer = new ImagePlacer().invoke(x, y, section_size, i, scaled_img);
                int pos_x = imagePlacer.getPosX();
                int pos_y = imagePlacer.getPosY();

                //Store bitmaps and their respective positions for accessing in the OnTouchEvent
                //Since the bitmaps do not store any info on position
                draw_bitmap_list.add(scaled_img);
                bitmap_pos.add(new int[]{pos_x, pos_y});

                //Draw Bitmap
                canvas.drawBitmap(scaled_img, pos_x, pos_y, null);
            }

        }
    }


    //Grab the top card from the draw pile and pull images from it, if the draw Pile is empty
    //then game is over
    private boolean createDrawArray(){
        List<Integer> draw_card;
        if (gameManager.getDrawPile().size() > 0) {
            draw_card = gameManager.getDrawPile().get(0).getImages();
            //Create a mapped array of drawable items
            draw_card_imgs = new ArrayList<>();
            for (int value : draw_card) {
                draw_card_imgs.add(images_list.get(value));
            }
            return false;
        }
        return true;
    }


    private void createDiscardArray(){
        List<Integer> discard_card = gameManager.getDiscardPile().get(0).getImages();
        //If card already exists, replace with new one
        discard_card_imgs = new ArrayList<>();
        for (int value : discard_card){
                discard_card_imgs.add(images_list.get(value));
        }
    }



    @Override
    public boolean onTouchEvent(MotionEvent event) {
        int action = event.getAction();
        int x = (int) event.getX();
        int y = (int) event.getY();

        if (action == MotionEvent.ACTION_DOWN) {
            for (int i = 0; i < draw_bitmap_list.size(); i++){
                int pos_x = bitmap_pos.get(i)[0];
                int pos_y = bitmap_pos.get(i)[1];
                int width = draw_bitmap_list.get(i).getWidth();
                int height = draw_bitmap_list.get(i).getHeight();

                if (x > pos_x && x < pos_x + width && y > pos_y && y < pos_y + height) {
                    for (int j = 0 ; j < discard_bitmap_list.size(); j ++ ){
                        if (draw_bitmap_list.get(i).sameAs(discard_bitmap_list.get(j))){
                            invalidate();
                            discard_bitmap_list = new ArrayList<>();
                            draw_bitmap_list = new ArrayList<>();
                            bitmap_pos = new ArrayList<>();
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }


    // Sub Class for placing Images on the cards, (probably better way to do this, I just used the
    // default Extract Method in Android Studio)
    private class ImagePlacer {
        private int pos_x;
        private int pos_y;

        int getPosX() {
            return pos_x;
        }

        int getPosY() {
            return pos_y;
        }

        ImagePlacer invoke(float x, float y, int section_size, int i, Bitmap scaled_img) {
            // TODO: Randomize the initial degree for placing the items so its not so obvious
            // TODO: Randomize the x and y coord offsets a bit
            //Get Coordinates for placing bitmap within Circle
            float rad = (float) Math.toRadians( i * section_size);
            int width = (int) (Math.cos(rad) * RADIUS * (0.55f));
            int height = (int) (Math.sin(rad) * RADIUS * (0.55f));


            pos_x = (int) (width + x - scaled_img.getWidth() / 2f);
            pos_y = (int) (height + y - scaled_img.getHeight() / 2f);
            return this;
        }
    }
}
